#version 460 core
#extension GL_EXT_ray_tracing : enable

layout(location = 0) rayPayloadEXT uint hitCounter;

layout(set = 0, binding = 0) uniform sampler2D gBufferWorldPositions;
layout(set = 0, binding = 1) uniform sampler2D gBufferWorldNormals;
layout(set = 0, binding = 2) uniform sampler2D gBufferColors;
layout(set = 0, binding = 3) uniform sampler2D gBufferDepth;

layout(set = 1, binding = 0, r32f) uniform writeonly image2D shadows;

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

    const vec3 lightWorldPos = vec3(-30.0, 30.0, 30.0);

    // We want to issue a ray that start at each world pos we have recorded for the opaque geometries
    // and goes back to the light source. Any intersection along the ray means we have shadows

    // Ray
    vec4 origin = vec4(texture(gBufferWorldPositions, uv).xyz, 1.0);
    vec4 direction = vec4(normalize(lightWorldPos - origin.xyz), 0.0);

    uint rayFlags = gl_RayFlagsNoneEXT;
    float tMin = 0.1;
    float tMax = 1000.0;

    traceRayEXT(topLevelAS, // acceleration structure
                rayFlags, // rayFlags
                0xFF, // cullMask
                0, // sbtRecordOffset
                0, // sbtRecordStride
                0, // missIndex
                origin.xyz, // ray origin
                tMin, // ray min range
                direction.xyz, // ray direction
                tMax, // ray max range
                0 // hitCounter (location = 0)
    );

    imageStore(shadows, ivec2(gl_LaunchIDEXT.xy), vec4(float(hitCounter > 0 ? 1.0 : 0.0)));
}
